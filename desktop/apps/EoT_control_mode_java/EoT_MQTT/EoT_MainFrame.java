/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EoT_MQTT;

import java.awt.event.MouseEvent;
import java.io.File;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import paho.client.mqttv3.MqttException;


/**
 *
 * @author DELL2
 */
public class EoT_MainFrame extends javax.swing.JFrame {


    /**
     * Creates new form EoT_MainFrame
     */
    public EoT_MainFrame() {

        initComponents();
        this.setSize(910, 650);
        this.setLocationRelativeTo(null);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        brokerAddressLabel = new javax.swing.JLabel();
        ip = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        DisconnectButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        publishButton = new javax.swing.JButton();
        topicPubTF = new javax.swing.JTextField();
        messageScrollPane = new javax.swing.JScrollPane();
        publishText = new javax.swing.JTextArea();
        topicLabel1 = new javax.swing.JLabel();
        receivedLabel1 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        topicTF = new javax.swing.JTextField();
        topicLabel = new javax.swing.JLabel();
        SubsButton = new javax.swing.JButton();
        UnsubButton = new javax.swing.JButton();
        receivedLabel = new javax.swing.JLabel();
        receivedScrollPane = new javax.swing.JScrollPane();
        receivedText = new javax.swing.JTextArea();
        topicsScrollPane = new javax.swing.JScrollPane();
        topicsSubscribed = new javax.swing.JList();
        topicsLabel = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        wifiChannelCombo = new javax.swing.JComboBox();
        wifiSecurityCombo = new javax.swing.JComboBox();
        wifiSSIDtext = new javax.swing.JTextField();
        wifiConfigCombo = new javax.swing.JComboBox();
        optionLabel = new javax.swing.JLabel();
        securityLabel = new javax.swing.JLabel();
        passLabel = new javax.swing.JLabel();
        channelLabel = new javax.swing.JLabel();
        wifiPasstext = new javax.swing.JPasswordField();
        ssidLabel = new javax.swing.JLabel();
        wifiConfigButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        fileStructureTree = new javax.swing.JTree();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        download = new javax.swing.JPanel();
        ssidLabel6 = new javax.swing.JLabel();
        ssidLabel7 = new javax.swing.JLabel();
        dstDir2 = new javax.swing.JTextField();
        srcDir2 = new javax.swing.JTextField();
        downloadButton = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        download1 = new javax.swing.JPanel();
        uploadButton = new javax.swing.JButton();
        ssidLabel3 = new javax.swing.JLabel();
        ssidLabel4 = new javax.swing.JLabel();
        dstDir = new javax.swing.JTextField();
        srcDir = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        hourstf = new javax.swing.JTextField();
        minstf = new javax.swing.JTextField();
        secstf = new javax.swing.JTextField();
        daytf = new javax.swing.JTextField();
        monthtf = new javax.swing.JTextField();
        yeartf = new javax.swing.JTextField();
        setDateButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        dateLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        getDateButton = new javax.swing.JButton();
        jPanel13 = new javax.swing.JPanel();
        hourstfDev = new javax.swing.JTextField();
        minstfDev = new javax.swing.JTextField();
        secstfDev = new javax.swing.JTextField();
        daytfDev = new javax.swing.JTextField();
        monthtfDev = new javax.swing.JTextField();
        yeartfDev = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dateLabel1 = new javax.swing.JLabel();
        timeLabel1 = new javax.swing.JLabel();
        getDevDateButton = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        programPath = new javax.swing.JTextField();
        programChooser = new javax.swing.JButton();
        uploadoProgButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        getSnapshotButton = new javax.swing.JButton();
        raisedPanel = new javax.swing.JPanel();
        imagePanel = new javax.swing.JLabel();
        menu = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EoT Control Mode Desktop Application");
        setMaximumSize(new java.awt.Dimension(905, 625));
        setMinimumSize(new java.awt.Dimension(905, 625));
        setResizable(false);
        setSize(new java.awt.Dimension(905, 625));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                disconnectWhenClosing(evt);
            }
        });

        jTabbedPane1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jPanel1.setMaximumSize(new java.awt.Dimension(897, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(897, 600));
        jPanel1.setLayout(null);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Connection Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        brokerAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        brokerAddressLabel.setText("Broker address:");

        ip.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ip.setText("192.168.1.1");
        ip.setToolTipText("");

        portLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        portLabel.setText("Port:");

        port.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        port.setText("1883");

        ConnectButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ConnectButton.setLabel("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        DisconnectButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        DisconnectButton.setEnabled(false);
        DisconnectButton.setLabel("Disconnect");
        DisconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(brokerAddressLabel)
                .addGap(38, 38, 38)
                .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(portLabel)
                .addGap(24, 24, 24)
                .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(ConnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DisconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(portLabel))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(brokerAddressLabel))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ConnectButton)
                        .addComponent(DisconnectButton))))
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 10, 880, 70);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Publish Message", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        publishButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        publishButton.setText("Publish");
        publishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                publishButtonActionPerformed(evt);
            }
        });

        topicPubTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        publishText.setColumns(20);
        publishText.setRows(5);
        messageScrollPane.setViewportView(publishText);

        topicLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        topicLabel1.setText("Topic:");

        receivedLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        receivedLabel1.setText("Message:");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topicLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(topicPubTF, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(messageScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 560, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(publishButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(receivedLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(publishButton)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(topicLabel1)
                            .addComponent(receivedLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topicPubTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(messageScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel5);
        jPanel5.setBounds(10, 460, 880, 100);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Suscriptions", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        topicTF.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        topicTF.setToolTipText("");
        topicTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                topicTFKeyReleased(evt);
            }
        });

        topicLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        topicLabel.setText("Topic:");

        SubsButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SubsButton.setText("Subscribe");
        SubsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SubsButtonActionPerformed(evt);
            }
        });

        UnsubButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        UnsubButton.setText("Unsubscribe");
        UnsubButton.setEnabled(false);
        UnsubButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UnsubButtonActionPerformed(evt);
            }
        });

        receivedLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        receivedLabel.setText("Messages Received:");

        receivedText.setEditable(false);
        receivedText.setColumns(20);
        receivedText.setRows(5);
        receivedScrollPane.setViewportView(receivedText);

        topicsSubscribed.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        topicsSubscribed.setModel(modelList);
        topicsSubscribed.setFocusable(false);
        topicsScrollPane.setViewportView(topicsSubscribed);

        topicsLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        topicsLabel.setText("Sub Topics:");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(topicLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(topicTF, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(SubsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(UnsubButton))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(topicsLabel)
                            .addComponent(topicsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(receivedLabel)
                            .addComponent(receivedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 676, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(topicTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(SubsButton)
                        .addComponent(UnsubButton))
                    .addComponent(topicLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topicsLabel)
                    .addComponent(receivedLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(topicsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(receivedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 10, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel6);
        jPanel6.setBounds(10, 90, 880, 360);

        jTabbedPane1.addTab("MQTT Client", jPanel1);

        jPanel4.setLayout(null);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Configure WiFi", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel7.setLayout(null);

        wifiChannelCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        wifiChannelCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11" }));
        jPanel7.add(wifiChannelCombo);
        wifiChannelCombo.setBounds(655, 40, 70, 26);

        wifiSecurityCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        wifiSecurityCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "OPEN", "WEP", "WPA2" }));
        wifiSecurityCombo.setMinimumSize(new java.awt.Dimension(68, 24));
        wifiSecurityCombo.setPreferredSize(new java.awt.Dimension(68, 24));
        jPanel7.add(wifiSecurityCombo);
        wifiSecurityCombo.setBounds(340, 40, 130, 26);

        wifiSSIDtext.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel7.add(wifiSSIDtext);
        wifiSSIDtext.setBounds(190, 40, 130, 26);

        wifiConfigCombo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        wifiConfigCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Create AP", "Connect to AP", "Reset AP Config." }));
        wifiConfigCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wifiConfigComboActionPerformed(evt);
            }
        });
        jPanel7.add(wifiConfigCombo);
        wifiConfigCombo.setBounds(15, 40, 150, 26);

        optionLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        optionLabel.setText("Option:");
        jPanel7.add(optionLabel);
        optionLabel.setBounds(15, 20, 65, 17);

        securityLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        securityLabel.setText("Security:");
        jPanel7.add(securityLabel);
        securityLabel.setBounds(340, 20, 100, 17);

        passLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        passLabel.setText("Password:");
        jPanel7.add(passLabel);
        passLabel.setBounds(500, 20, 100, 17);

        channelLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        channelLabel.setText("Channel:");
        jPanel7.add(channelLabel);
        channelLabel.setBounds(655, 20, 128, 17);

        wifiPasstext.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jPanel7.add(wifiPasstext);
        wifiPasstext.setBounds(500, 40, 130, 26);

        ssidLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ssidLabel.setText("SSID:");
        jPanel7.add(ssidLabel);
        ssidLabel.setBounds(190, 20, 59, 17);

        wifiConfigButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        wifiConfigButton.setLabel("Configure");
        wifiConfigButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                wifiConfigButtonActionPerformed(evt);
            }
        });
        jPanel7.add(wifiConfigButton);
        wifiConfigButton.setBounds(750, 40, 110, 27);

        jPanel4.add(jPanel7);
        jPanel7.setBounds(10, 10, 880, 80);

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "SD Card Management", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel8.setLayout(null);

        fileStructureTree.setModel(treeModel);
        fileStructureTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                fileStructureTreeTreeExpanded(evt);
            }
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
            }
        });
        fileStructureTree.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fileStructureTreeMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(fileStructureTree);

        jPanel8.add(jScrollPane1);
        jScrollPane1.setBounds(20, 30, 320, 200);

        download.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        download.setLayout(null);

        ssidLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ssidLabel6.setText("File:");
        download.add(ssidLabel6);
        ssidLabel6.setBounds(10, 42, 88, 17);

        ssidLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ssidLabel7.setText("Destination:");
        download.add(ssidLabel7);
        ssidLabel7.setBounds(10, 82, 88, 17);

        dstDir2.setText("...");
        download.add(dstDir2);
        dstDir2.setBounds(110, 80, 338, 19);

        srcDir2.setText("/mnt/sdcard/...");
        srcDir2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                srcDir2ActionPerformed(evt);
            }
        });
        download.add(srcDir2);
        srcDir2.setBounds(110, 40, 338, 19);

        downloadButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        downloadButton.setText("Download");
        downloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadFile(evt);
            }
        });
        download.add(downloadButton);
        downloadButton.setBounds(210, 130, 105, 27);

        jButton8.setText("...");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8selectDestFolder(evt);
            }
        });
        download.add(jButton8);
        jButton8.setBounds(460, 80, 28, 17);

        jTabbedPane2.addTab("Download File", download);

        download1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        download1.setLayout(null);

        uploadButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        uploadButton.setText("Upload");
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadFile(evt);
            }
        });
        download1.add(uploadButton);
        uploadButton.setBounds(210, 130, 105, 27);

        ssidLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ssidLabel3.setText("Destination:");
        download1.add(ssidLabel3);
        ssidLabel3.setBounds(10, 82, 88, 17);

        ssidLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ssidLabel4.setText("File:");
        download1.add(ssidLabel4);
        ssidLabel4.setBounds(10, 42, 88, 17);

        dstDir.setText("/mnt/sdcard/...");
        download1.add(dstDir);
        dstDir.setBounds(110, 80, 338, 19);

        srcDir.setText("...");
        download1.add(srcDir);
        srcDir.setBounds(110, 40, 338, 19);

        jButton1.setText("...");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectFile(evt);
            }
        });
        download1.add(jButton1);
        jButton1.setBounds(460, 40, 28, 17);

        jTabbedPane2.addTab("UploadFile", download1);

        jPanel8.add(jTabbedPane2);
        jTabbedPane2.setBounds(360, 20, 505, 210);

        jPanel4.add(jPanel8);
        jPanel8.setBounds(10, 320, 880, 240);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Date & Time Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel11.setLayout(null);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Set Date & Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel10.setLayout(null);

        hourstf.setEditable(false);
        hourstf.setForeground(new java.awt.Color(102, 102, 102));
        hourstf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel10.add(hourstf);
        hourstf.setBounds(70, 30, 30, 30);

        minstf.setEditable(false);
        minstf.setForeground(new java.awt.Color(102, 102, 102));
        minstf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel10.add(minstf);
        minstf.setBounds(120, 30, 30, 30);

        secstf.setEditable(false);
        secstf.setForeground(new java.awt.Color(102, 102, 102));
        secstf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel10.add(secstf);
        secstf.setBounds(170, 30, 30, 30);

        daytf.setEditable(false);
        daytf.setForeground(new java.awt.Color(102, 102, 102));
        daytf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel10.add(daytf);
        daytf.setBounds(70, 70, 30, 30);

        monthtf.setEditable(false);
        monthtf.setForeground(new java.awt.Color(102, 102, 102));
        monthtf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel10.add(monthtf);
        monthtf.setBounds(120, 70, 30, 30);

        yeartf.setEditable(false);
        yeartf.setForeground(new java.awt.Color(102, 102, 102));
        yeartf.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel10.add(yeartf);
        yeartf.setBounds(170, 70, 60, 30);

        setDateButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        setDateButton.setText("Set Values");
        setDateButton.setEnabled(false);
        setDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setDateButtonActionPerformed(evt);
            }
        });
        jPanel10.add(setDateButton);
        setDateButton.setBounds(250, 70, 150, 25);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText(":");
        jPanel10.add(jLabel1);
        jLabel1.setBounds(150, 70, 20, 30);

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText(":");
        jPanel10.add(jLabel2);
        jLabel2.setBounds(100, 30, 20, 30);

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText(":");
        jPanel10.add(jLabel3);
        jLabel3.setBounds(150, 30, 20, 30);

        jLabel5.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText(":");
        jPanel10.add(jLabel5);
        jLabel5.setBounds(100, 70, 20, 30);

        dateLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateLabel.setText("Date:");
        jPanel10.add(dateLabel);
        dateLabel.setBounds(20, 70, 50, 30);

        timeLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        timeLabel.setText("Time:");
        jPanel10.add(timeLabel);
        timeLabel.setBounds(20, 30, 60, 30);

        getDateButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        getDateButton.setText("Current Time");
        getDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDateButtonActionPerformed(evt);
            }
        });
        jPanel10.add(getDateButton);
        getDateButton.setBounds(250, 30, 150, 25);

        jPanel11.add(jPanel10);
        jPanel10.setBounds(445, 20, 420, 110);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Device Time", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel13.setLayout(null);

        hourstfDev.setEditable(false);
        hourstfDev.setForeground(new java.awt.Color(102, 102, 102));
        hourstfDev.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel13.add(hourstfDev);
        hourstfDev.setBounds(240, 30, 30, 30);

        minstfDev.setEditable(false);
        minstfDev.setForeground(new java.awt.Color(102, 102, 102));
        minstfDev.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel13.add(minstfDev);
        minstfDev.setBounds(290, 30, 30, 30);

        secstfDev.setEditable(false);
        secstfDev.setForeground(new java.awt.Color(102, 102, 102));
        secstfDev.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel13.add(secstfDev);
        secstfDev.setBounds(340, 30, 30, 30);

        daytfDev.setEditable(false);
        daytfDev.setForeground(new java.awt.Color(102, 102, 102));
        daytfDev.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel13.add(daytfDev);
        daytfDev.setBounds(240, 70, 30, 30);

        monthtfDev.setEditable(false);
        monthtfDev.setForeground(new java.awt.Color(102, 102, 102));
        monthtfDev.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel13.add(monthtfDev);
        monthtfDev.setBounds(290, 70, 30, 30);

        yeartfDev.setEditable(false);
        yeartfDev.setForeground(new java.awt.Color(102, 102, 102));
        yeartfDev.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jPanel13.add(yeartfDev);
        yeartfDev.setBounds(340, 70, 60, 30);

        jLabel4.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText(":");
        jPanel13.add(jLabel4);
        jLabel4.setBounds(320, 70, 20, 30);

        jLabel6.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText(":");
        jPanel13.add(jLabel6);
        jLabel6.setBounds(270, 30, 20, 30);

        jLabel7.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText(":");
        jPanel13.add(jLabel7);
        jLabel7.setBounds(320, 30, 20, 30);

        jLabel8.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText(":");
        jPanel13.add(jLabel8);
        jLabel8.setBounds(270, 70, 20, 30);

        dateLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateLabel1.setText("Date:");
        jPanel13.add(dateLabel1);
        dateLabel1.setBounds(190, 70, 50, 30);

        timeLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        timeLabel1.setText("Time:");
        jPanel13.add(timeLabel1);
        timeLabel1.setBounds(190, 30, 60, 30);

        getDevDateButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        getDevDateButton.setText("Get Values");
        getDevDateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getDevDateButtonActionPerformed(evt);
            }
        });
        jPanel13.add(getDevDateButton);
        getDevDateButton.setBounds(20, 50, 150, 25);

        jPanel11.add(jPanel13);
        jPanel13.setBounds(15, 20, 420, 110);

        jPanel4.add(jPanel11);
        jPanel11.setBounds(10, 100, 880, 140);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Upload Program to Flash Memory", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N
        jPanel14.setLayout(null);
        jPanel14.add(programPath);
        programPath.setBounds(20, 25, 680, 20);

        programChooser.setText("...");
        programChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectProgram(evt);
            }
        });
        jPanel14.add(programChooser);
        programChooser.setBounds(712, 25, 28, 20);

        uploadoProgButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        uploadoProgButton.setText("Upload");
        uploadoProgButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadProgram(evt);
            }
        });
        jPanel14.add(uploadoProgButton);
        uploadoProgButton.setBounds(762, 20, 100, 27);

        jPanel4.add(jPanel14);
        jPanel14.setBounds(10, 250, 880, 60);

        jTabbedPane1.addTab("Configuration", jPanel4);

        getSnapshotButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        getSnapshotButton.setText("Get Snapshot");
        getSnapshotButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSnapshotButtonActionPerformed(evt);
            }
        });

        raisedPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        imagePanel.setBackground(new java.awt.Color(255, 255, 255));
        imagePanel.setAlignmentX(10.0F);
        imagePanel.setAlignmentY(10.0F);

        javax.swing.GroupLayout raisedPanelLayout = new javax.swing.GroupLayout(raisedPanel);
        raisedPanel.setLayout(raisedPanelLayout);
        raisedPanelLayout.setHorizontalGroup(
            raisedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(raisedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        raisedPanelLayout.setVerticalGroup(
            raisedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(raisedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(188, 188, 188)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(raisedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(getSnapshotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(208, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(116, Short.MAX_VALUE)
                .addComponent(raisedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addComponent(getSnapshotButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );

        jTabbedPane1.addTab("Get Camera Snapshot", jPanel2);

        jMenu1.setText("File");
        jMenu1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N

        jMenu4.setText("jMenu4");
        jMenu1.add(jMenu4);

        menu.add(jMenu1);

        jMenu2.setText("Edit");
        jMenu2.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        menu.add(jMenu2);

        jMenu3.setText("Help");
        jMenu3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        menu.add(jMenu3);

        setJMenuBar(menu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 905, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("jTabbedPane1");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectWhenClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_disconnectWhenClosing
        if(EOT_Client!=null){
            try{
                EOT_Client.disconnect();
            }catch(Exception e){
                JOptionPane.showMessageDialog(this, "Error disconnecting the client.","Error",JOptionPane.ERROR_MESSAGE);
            }
        }
        this.dispose();
    }//GEN-LAST:event_disconnectWhenClosing

    private void getSnapshotButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSnapshotButtonActionPerformed
        try {
            ImageIcon img = EOT_Client.askSnapshot();
            this.setSnapshot(img);
        } catch (MqttException ex) {
            Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_getSnapshotButtonActionPerformed

    private void uploadProgram(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadProgram
        if (EOT_Client != null && EOT_Client.isConnected()) {
            if (programPath.getText() != null && !programPath.getText().equals("")) {
                try {
                    int result = EOT_Client.uploadProgram(programPath.getText());
                    JOptionPane.showMessageDialog(this, "File sent.", "Information", JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Error sending the program file.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "You must select the program path.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uploadProgram

    private void selectProgram(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectProgram
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION){
            programPath.setText(fc.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_selectProgram

    private void getDevDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDevDateButtonActionPerformed
        if (EOT_Client != null && EOT_Client.isConnected()) {
            try {
                Calendar calendar = this.EOT_Client.getDate();
                daytfDev.setText(calendar.get(Calendar.DAY_OF_MONTH)+"");
                monthtfDev.setText((calendar.get(Calendar.MONTH)+1)+"");
                yeartfDev.setText(calendar.get(Calendar.YEAR)+"");
                hourstfDev.setText(calendar.get(Calendar.HOUR_OF_DAY)+"");
                minstfDev.setText(calendar.get(Calendar.MINUTE)+"");
                secstfDev.setText(calendar.get(Calendar.SECOND)+"");
            } catch (MqttException ex) {
                JOptionPane.showMessageDialog(this, "Error retrieving Time and Date.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_getDevDateButtonActionPerformed

    private void getDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getDateButtonActionPerformed
        Calendar calendar = new GregorianCalendar();
        daytf.setText(calendar.get(Calendar.DAY_OF_MONTH)+"");
        monthtf.setText((calendar.get(Calendar.MONTH)+1)+"");
        yeartf.setText(calendar.get(Calendar.YEAR)+"");
        hourstf.setText(calendar.get(Calendar.HOUR_OF_DAY)+"");
        minstf.setText(calendar.get(Calendar.MINUTE)+"");
        secstf.setText(calendar.get(Calendar.SECOND)+"");
        setDateButton.setEnabled(true);
    }//GEN-LAST:event_getDateButtonActionPerformed

    private void setDateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setDateButtonActionPerformed

        if (EOT_Client != null && EOT_Client.isConnected()) {
            if (this.hourstf.getText() != null && !this.hourstf.getText().equals("")
                && this.minstf.getText() != null && !this.minstf.getText().equals("")
                && this.secstf.getText() != null && !this.secstf.getText().equals("")
                && this.daytf.getText() != null && !this.daytf.getText().equals("")
                && this.monthtf.getText() != null && !this.monthtf.getText().equals("")
                && this.yeartf.getText() != null && !this.yeartf.getText().equals("")) {
                try {
                    int result=this.EOT_Client.updateDate(yeartf.getText(), monthtf.getText(), daytf.getText(), hourstf.getText(), minstf.getText(), secstf.getText());
                    if(result!=-1) JOptionPane.showMessageDialog(this, "Date updated.", "Information", JOptionPane.INFORMATION_MESSAGE);
                    else JOptionPane.showMessageDialog(this, "Error updating the date.", "Error", JOptionPane.ERROR_MESSAGE);
                } catch (MqttException ex) {
                    JOptionPane.showMessageDialog(this, "MQTT Client error", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Time and Date are empty.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_setDateButtonActionPerformed

    private void selectFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectFile
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION){
            srcDir.setText(fc.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_selectFile

    private void uploadFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadFile
        if (EOT_Client != null && EOT_Client.isConnected()) {
            if (srcDir.getText() != null && !srcDir.getText().equals("")) {
                if (dstDir.getText() != null && !dstDir.getText().equals("")) {
                    try {
                        int result = EOT_Client.uploadFile(srcDir.getText(), dstDir.getText());
                        if(result!=-1){
                            this.loadFileSystemStructure();
                            JOptionPane.showMessageDialog(this, "File sent.", "Information", JOptionPane.INFORMATION_MESSAGE);
                        }
                        else JOptionPane.showMessageDialog(this, "Error sending the file.", "Error", JOptionPane.ERROR_MESSAGE);
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Error sending the file.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "You must select source and destination paths.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_uploadFile

    private void jButton8selectDestFolder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8selectDestFolder
        JFileChooser fc = new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(fc.showOpenDialog(null)==JFileChooser.APPROVE_OPTION){
            dstDir2.setText(fc.getSelectedFile().getPath());
        }
    }//GEN-LAST:event_jButton8selectDestFolder

    private void downloadFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadFile
        if (EOT_Client != null && EOT_Client.isConnected()) {
            if (srcDir2.getText() != null && !srcDir2.getText().equals("")) {
                if (dstDir2.getText() != null && !dstDir2.getText().equals("")) {
                    try {
                        EOT_Client.downloadFile(srcDir2.getText(), dstDir2.getText());
                    } catch (Exception e) {
                        JOptionPane.showMessageDialog(this, "Error sending the file.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            } else {
                JOptionPane.showMessageDialog(this, "You must select source and destination paths.", "Information", JOptionPane.INFORMATION_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_downloadFile

    private void fileStructureTreeMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fileStructureTreeMouseClicked

        if (evt.getButton() == MouseEvent.BUTTON3) {
            int selRow = fileStructureTree.getRowForLocation(evt.getX(), evt.getY());
            fileStructureTree.setSelectionRow(selRow);
            if (selRow != -1) {
                DefaultMutableTreeNode node = (DefaultMutableTreeNode) fileStructureTree.getLastSelectedPathComponent();
                if (node == null) return;
                JPopupMenu popup = new JPopupMenu();
                //if node is a folder
                if (node.getAllowsChildren()) {
                    if (evt.getClickCount() == 1) {
                        JMenuItem menuItem = new JMenuItem("Create subfolder");
                        menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
                            @Override
                            public void mousePressed(java.awt.event.MouseEvent evt) {
                                if (evt.getButton() == MouseEvent.BUTTON1) {
                                    addSubFolder(evt);
                                }
                            }
                        });
                        popup.add(menuItem);
                        JMenuItem menuItem2 = new JMenuItem("Remove content");
                        menuItem2.addMouseListener(new java.awt.event.MouseAdapter() {
                            @Override
                            public void mousePressed(java.awt.event.MouseEvent evt) {
                                if (evt.getButton() == MouseEvent.BUTTON1) {
                                    removeContent(evt);
                                }
                            }
                        });
                        popup.add(menuItem2);
                        if(!node.isRoot()){
                            JMenuItem menuItem3 = new JMenuItem("Remove all");
                            menuItem3.addMouseListener(new java.awt.event.MouseAdapter() {
                                @Override
                                public void mousePressed(java.awt.event.MouseEvent evt) {
                                    if (evt.getButton() == MouseEvent.BUTTON1) {
                                        removeAll(evt);
                                    }
                                }
                            });
                            popup.add(menuItem3);
                        }
                    }
                    popup.show(evt.getComponent(), evt.getX(), evt.getY());
                }else{
                    JMenuItem menuItem = new JMenuItem("Remove file");
                    menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
                        @Override
                        public void mousePressed(java.awt.event.MouseEvent evt) {
                            if (evt.getButton() == MouseEvent.BUTTON1) {
                                removeFile(evt);
                            }
                        }
                    });
                    popup.add(menuItem);
                    popup.show(evt.getComponent(), evt.getX(), evt.getY());
                }
            }
        }
    }//GEN-LAST:event_fileStructureTreeMouseClicked

    private void fileStructureTreeTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_fileStructureTreeTreeExpanded

        //DefaultMutableTreeNode node = (DefaultMutableTreeNode) fileStructureTree
        String jTreeVarSelectedPath = "";
        Object[] pathsp = evt.getPath().getPath();
        for (int i = 0; i < pathsp.length; i++) {
            jTreeVarSelectedPath += pathsp[i];
            if (i + 1 < pathsp.length) {
                jTreeVarSelectedPath += "/";
            }
        }
        DefaultMutableTreeNode node = (DefaultMutableTreeNode) evt.getPath().getLastPathComponent();
        System.out.println(jTreeVarSelectedPath+" "+node.getAllowsChildren());

        if (EOT_Client != null && EOT_Client.isConnected()) {
            try {
                
                node.removeAllChildren();
                
                String[] paths = EOT_Client.getFileSystemStructure(jTreeVarSelectedPath);
                System.out.println("n of files "+paths.length);
                
                for (int i = 0; i < paths.length; i++) {
                    System.out.println("\n"+paths[i]+"\n");
                    String chain = paths[i];
                    int k=0;
                    while( chain.charAt(k) != ';' ){
                        k++;
                    }

                    if (paths[i].charAt(k+1) == '1') {
                        // File
                        node.add(new DefaultMutableTreeNode(paths[i].substring(0, k), false));
                    } else {
                        // Folder
                        node.add(new DefaultMutableTreeNode(paths[i].substring(0, k), true));
                    }
                }
                treeModel.reload(node);
                
            } catch (Exception ex) {
                Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "fileStructureTreeTreeExpanded - SD structure can not be loaded.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_fileStructureTreeTreeExpanded

    private void wifiConfigButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wifiConfigButtonActionPerformed
        // TODO add your handling code here:

        if(EOT_Client!=null && EOT_Client.isConnected()){
            String SSID, security, pass, channel;
            // Create AP
            switch(wifiConfigCombo.getSelectedIndex()){
                case 0:
                if(!(wifiSSIDtext.getText()==null) && !(wifiSSIDtext.getText().equals(""))){
                    if(!(Arrays.toString(wifiPasstext.getPassword())==null) && !(new String(wifiPasstext.getPassword()).equals(""))){
                        SSID = wifiSSIDtext.getText();
                        security = Integer.toString(wifiSecurityCombo.getSelectedIndex());
                        pass = new String(wifiPasstext.getPassword());
                        System.out.println(pass);
                        channel = Integer.toString(wifiChannelCombo.getSelectedIndex()+1);
                        try {
                            //EOTCreateAP
                            EOT_Client.createAP(SSID,security,pass,channel);
                            this.reset("The application will be restarted.\nPlease, connect your device to the new AP created.");
                        } catch (MqttException ex) {
                            Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Invalid Password","Error",JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Invalid SSID","Error",JOptionPane.ERROR_MESSAGE);
                }
                break;
                case 1:
                if(!(wifiSSIDtext.getText()==null) && !(wifiSSIDtext.getText().equals(""))){
                    if(!(Arrays.toString(wifiPasstext.getPassword())==null) && !(new String(wifiPasstext.getPassword()).equals(""))){
                        SSID = wifiSSIDtext.getText();
                        security = Integer.toString(wifiSecurityCombo.getSelectedIndex());
                        pass = new String(wifiPasstext.getPassword());
                        try {
                            //EOTConnectToAP
                            EOT_Client.connectToAP(SSID,security,pass);
                            this.reset("The application will be restarted.\nPlease, connect your device to the same AP your EoT device is connected to.");
                        } catch (MqttException ex) {
                            Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Invalid Password","Error",JOptionPane.ERROR_MESSAGE);
                    }
                }else{
                    JOptionPane.showMessageDialog(this, "Invalid SSID","Error",JOptionPane.ERROR_MESSAGE);
                }
                break;
                case 2:
                try {
                    //EOTDisconnectFromAP
                    EOT_Client.resetAPConfig();
                    this.reset("The application will be restarted.\nPlease, connect your device to the default EoT device AP.");
                } catch (MqttException ex) {
                    Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
                default:
                JOptionPane.showMessageDialog(this, "Invalid Option","Error",JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "Client not connected","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_wifiConfigButtonActionPerformed

    private void wifiConfigComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_wifiConfigComboActionPerformed
        switch(this.wifiConfigCombo.getSelectedIndex()){
            case 0:
            this.ssidLabel.setEnabled(true);
            this.wifiSSIDtext.setEnabled(true);
            this.passLabel.setEnabled(true);
            this.wifiPasstext.setEnabled(true);
            this.securityLabel.setEnabled(true);
            this.wifiSecurityCombo.setEnabled(true);
            this.channelLabel.setEnabled(true);
            this.wifiChannelCombo.setEnabled(true);
            break;
            case 1:
            this.ssidLabel.setEnabled(true);
            this.wifiSSIDtext.setEnabled(true);
            this.passLabel.setEnabled(true);
            this.wifiPasstext.setEnabled(true);
            this.securityLabel.setEnabled(true);
            this.wifiSecurityCombo.setEnabled(true);
            this.channelLabel.setEnabled(false);
            this.wifiChannelCombo.setEnabled(false);
            break;
            case 2:
            this.ssidLabel.setEnabled(false);
            this.wifiSSIDtext.setEnabled(false);
            this.passLabel.setEnabled(false);
            this.wifiPasstext.setEnabled(false);
            this.securityLabel.setEnabled(false);
            this.wifiSecurityCombo.setEnabled(false);
            this.channelLabel.setEnabled(false);
            this.wifiChannelCombo.setEnabled(false);
            break;
        }
    }//GEN-LAST:event_wifiConfigComboActionPerformed

    private void UnsubButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UnsubButtonActionPerformed
        try {
            //unsubscribe to topic
            if(modelList.contains(topicTF.getText())){
                EOT_Client.unsubscribe(topicTF.getText());
                //update topic subscribed list
                modelList.removeElement(topicTF.getText());
                topicsSubscribed.setModel(modelList);
                UnsubButton.setEnabled(false);
            }else{
                JOptionPane.showMessageDialog(this, "The client is not subscribed to this topic.","Error",JOptionPane.ERROR_MESSAGE);
            }
        } catch (MqttException ex) {
            Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_UnsubButtonActionPerformed

    private void SubsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SubsButtonActionPerformed
        if(EOT_Client!=null && EOT_Client.isConnected()){
            if(topicTF.getText()!=null && !topicTF.getText().equals("")){
                try {
                    //subscribe to topic
                    if(!modelList.contains(topicTF.getText())){
                        EOT_Client.subscribe(topicTF.getText(), 0);
                        //update topic subscribed list
                        modelList.addElement(topicTF.getText());
                        topicsSubscribed.setModel(modelList);
                        UnsubButton.setEnabled(true);
                    }else{
                        JOptionPane.showMessageDialog(this, "The client is already subscribed to this topic.","Information",JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (MqttException ex) {
                    Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(this, "A topic must be specified","Error",JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "The client is not connected to a broker.","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_SubsButtonActionPerformed

    private void topicTFKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_topicTFKeyReleased
        if(modelList.contains(topicTF.getText())){
            UnsubButton.setEnabled(true);
        }else{
            UnsubButton.setEnabled(false);
        }
    }//GEN-LAST:event_topicTFKeyReleased

    private void publishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_publishButtonActionPerformed

        if(EOT_Client!=null && EOT_Client.isConnected()){
            if(topicPubTF.getText()!=null && !topicPubTF.getText().equals("")){
                try {
                    // TODO add your handling code here:

                    EOT_Client.publish(topicPubTF.getText(), 0, publishText.getText().getBytes());
                } catch (MqttException ex) {
                    Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(this, "A topic must be specified","Error",JOptionPane.ERROR_MESSAGE);
            }
        }else{
            JOptionPane.showMessageDialog(this, "The client is not connected to a broker.","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_publishButtonActionPerformed

    private void DisconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectButtonActionPerformed
        try{
            EOT_Client.disconnect();
            DisconnectButton.setEnabled(false);
            ConnectButton.setEnabled(true);
            modelList = new DefaultListModel<>();
            topicsSubscribed.setModel(modelList);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error disconnecting the client.","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DisconnectButtonActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        // Create an instance of this class
        try{
            EOT_Client = new EoT_MQTT_Client(ip.getText(),Integer.parseInt(port.getText()));
            // Set the jframe
            EOT_Client.setMainFrame(this);

            EOT_Client.connect();
            ConnectButton.setEnabled(false);
            DisconnectButton.setEnabled(true);
            loadFileSystemStructure();
        }catch(MqttException ex){
            JOptionPane.showMessageDialog(this, "Error stablishing the connection.\n"+ex.getCause(),"Error",JOptionPane.ERROR_MESSAGE);
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, "Error stablishing the connection.","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void srcDir2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_srcDir2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_srcDir2ActionPerformed

    public void loadFileSystemStructure() {
        if(EOT_Client != null && EOT_Client.isConnected()){
            try {
                String[] paths = EOT_Client.getFileSystemStructure("/mnt/sdcard");
                fileSystemNode = new DefaultMutableTreeNode("/mnt/sdcard");
                for (int i = 0; i < paths.length; i++) {
                    
                    int k=0;
                    while( paths[i].charAt(k)!=';' ){
                        k++;
                    }
                    
                    if (paths[i].charAt(k+1) == '1') {
                        // File
                        fileSystemNode.add(new DefaultMutableTreeNode(paths[i].substring(0, k), false));
                    } else {
                        // Folder
                        fileSystemNode.add(new DefaultMutableTreeNode(paths[i].substring(0, k), true));
                    }
                }
                treeModel = new DefaultTreeModel(fileSystemNode, true);
                fileStructureTree.setModel(treeModel);
                                
            } catch (MqttException ex) {
                Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "SD structure can not be loaded.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
      
    
    
    public void removeFile(MouseEvent e) {
        String jTreeVarSelectedPath = "";
        Object[] paths = fileStructureTree.getSelectionPath().getPath();
        for (int i = 0; i < paths.length; i++) {
            jTreeVarSelectedPath += paths[i];
            if (i + 1 < paths.length) {
                jTreeVarSelectedPath += "/";
            }
        }
        if (EOT_Client != null && EOT_Client.isConnected()) {
            try {
                System.out.println("Removing " + jTreeVarSelectedPath);
                int res = EOT_Client.removeFile(jTreeVarSelectedPath);
                if(res==0){
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) fileStructureTree.getLastSelectedPathComponent();
                    node.removeFromParent();
                    treeModel.reload(node);
                }else{
                    JOptionPane.showMessageDialog(this, "Operation failed.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (MqttException ex) {
                JOptionPane.showMessageDialog(this, "Operation failed.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void removeAll(MouseEvent e) {
        String jTreeVarSelectedPath = "";
        Object[] paths = fileStructureTree.getSelectionPath().getPath();
        for (int i = 0; i < paths.length; i++) {
            jTreeVarSelectedPath += paths[i];
            if (i + 1 < paths.length) {
                jTreeVarSelectedPath += "/";
            }
        }
        if (EOT_Client != null && EOT_Client.isConnected()) {
            try {
                System.out.println("Removing " + jTreeVarSelectedPath);
                int res = EOT_Client.removeAll(jTreeVarSelectedPath);
                if(res==0){
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) fileStructureTree.getLastSelectedPathComponent();
                    DefaultMutableTreeNode parent = (DefaultMutableTreeNode) node.getParent();
                    node.removeFromParent();
                    treeModel.reload(parent);
                }else{
                    JOptionPane.showMessageDialog(this, "Operation failed.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (MqttException ex) {
                JOptionPane.showMessageDialog(this, "Operation failed.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void removeContent(MouseEvent e) {
        String jTreeVarSelectedPath = "";
        Object[] paths = fileStructureTree.getSelectionPath().getPath();
        for (int i = 0; i < paths.length; i++) {
            jTreeVarSelectedPath += paths[i];
            if (i + 1 < paths.length) {
                jTreeVarSelectedPath += "/";
            }
        }
        if (EOT_Client != null && EOT_Client.isConnected()) {
            try {
                System.out.println("Removing content from " + jTreeVarSelectedPath);
                int res = EOT_Client.removeContent(jTreeVarSelectedPath);
                if(res==0){
                    DefaultMutableTreeNode node = (DefaultMutableTreeNode) fileStructureTree.getLastSelectedPathComponent();
                    node.removeAllChildren();
                    treeModel.reload(node);
                }else{
                    JOptionPane.showMessageDialog(this, "Operation failed.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (MqttException ex) {
                JOptionPane.showMessageDialog(this, "Operation failed.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void addSubFolder(MouseEvent e) {
        String jTreeVarSelectedPath = "";
        Object[] paths = fileStructureTree.getSelectionPath().getPath();
        for (int i = 0; i < paths.length; i++) {
            jTreeVarSelectedPath += paths[i];
            if (i + 1 < paths.length) {
                jTreeVarSelectedPath += "/";
            }
        }
        String folderName = JOptionPane.showInputDialog("Folder Name:");
        if (folderName != null && !(folderName.equals(""))) {
            jTreeVarSelectedPath += "/" + folderName;
            if (EOT_Client != null && EOT_Client.isConnected()) {
                try {
                    System.out.println("Path " + jTreeVarSelectedPath);
                    int res = EOT_Client.createFolder(jTreeVarSelectedPath);
                    if(res==0){
                        DefaultMutableTreeNode node = (DefaultMutableTreeNode) fileStructureTree.getLastSelectedPathComponent();
                        node.add(new DefaultMutableTreeNode(folderName, true));
                        treeModel.nodesWereInserted(node, new int[]{node.getChildCount() - 1});
                    }else{
                    JOptionPane.showMessageDialog(this, "Operation failed.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (MqttException ex) {
                    JOptionPane.showMessageDialog(this, "Operation failed.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Client not connected", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    public void setSnapshot(Icon image){
        imagePanel.setIcon(image);
        this.repaint();
    }
    

    public void showMessage(String topic, String message){
        receivedText.append(""+topic+" -> "+message+"\n");
        receivedScrollPane.getVerticalScrollBar().setValue( receivedScrollPane.getVerticalScrollBar().getMaximum() );
        this.repaint();
    }


    private void reset(String msg) {
        JOptionPane.showMessageDialog(this, msg);
        this.EOT_Client=null;
        this.setVisible(false);
        this.dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EoT_MainFrame().setVisible(true);
            }
        });
                
    }
    
    
    void showDialog(String message) {
        JOptionPane.showMessageDialog(this,message);
    }

    void lock() {
        this.setEnabled(false);
        System.out.println("lock");
        
    }

    void unlock() {
        this.setEnabled(true);
        System.out.println("unlock");
        
    }
    

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        //this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../logo.png")));
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(EoT_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EoT_MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectButton;
    private javax.swing.JButton DisconnectButton;
    private javax.swing.JButton SubsButton;
    private javax.swing.JButton UnsubButton;
    private javax.swing.JLabel brokerAddressLabel;
    private javax.swing.JLabel channelLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JLabel dateLabel1;
    private javax.swing.JTextField daytf;
    private javax.swing.JTextField daytfDev;
    private javax.swing.JPanel download;
    private javax.swing.JPanel download1;
    private javax.swing.JButton downloadButton;
    private javax.swing.JTextField dstDir;
    private javax.swing.JTextField dstDir2;
    private javax.swing.JTree fileStructureTree;
    private javax.swing.JButton getDateButton;
    private javax.swing.JButton getDevDateButton;
    private javax.swing.JButton getSnapshotButton;
    private javax.swing.JTextField hourstf;
    private javax.swing.JTextField hourstfDev;
    private javax.swing.JLabel imagePanel;
    private javax.swing.JTextField ip;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JMenuBar menu;
    private javax.swing.JScrollPane messageScrollPane;
    private javax.swing.JTextField minstf;
    private javax.swing.JTextField minstfDev;
    private javax.swing.JTextField monthtf;
    private javax.swing.JTextField monthtfDev;
    private javax.swing.JLabel optionLabel;
    private javax.swing.JLabel passLabel;
    private javax.swing.JTextField port;
    private javax.swing.JLabel portLabel;
    private javax.swing.JButton programChooser;
    private javax.swing.JTextField programPath;
    private javax.swing.JButton publishButton;
    private javax.swing.JTextArea publishText;
    private javax.swing.JPanel raisedPanel;
    private javax.swing.JLabel receivedLabel;
    private javax.swing.JLabel receivedLabel1;
    private javax.swing.JScrollPane receivedScrollPane;
    private javax.swing.JTextArea receivedText;
    private javax.swing.JTextField secstf;
    private javax.swing.JTextField secstfDev;
    private javax.swing.JLabel securityLabel;
    private javax.swing.JButton setDateButton;
    private javax.swing.JTextField srcDir;
    private javax.swing.JTextField srcDir2;
    private javax.swing.JLabel ssidLabel;
    private javax.swing.JLabel ssidLabel3;
    private javax.swing.JLabel ssidLabel4;
    private javax.swing.JLabel ssidLabel6;
    private javax.swing.JLabel ssidLabel7;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel timeLabel1;
    private javax.swing.JLabel topicLabel;
    private javax.swing.JLabel topicLabel1;
    private javax.swing.JTextField topicPubTF;
    private javax.swing.JTextField topicTF;
    private javax.swing.JLabel topicsLabel;
    private javax.swing.JScrollPane topicsScrollPane;
    private javax.swing.JList topicsSubscribed;
    private javax.swing.JButton uploadButton;
    private javax.swing.JButton uploadoProgButton;
    private javax.swing.JComboBox wifiChannelCombo;
    private javax.swing.JButton wifiConfigButton;
    private javax.swing.JComboBox wifiConfigCombo;
    private javax.swing.JPasswordField wifiPasstext;
    private javax.swing.JTextField wifiSSIDtext;
    private javax.swing.JComboBox wifiSecurityCombo;
    private javax.swing.JTextField yeartf;
    private javax.swing.JTextField yeartfDev;
    // End of variables declaration//GEN-END:variables
    
    // Our variables
    private EoT_MQTT_Client EOT_Client;
    private DefaultListModel<String> modelList = new DefaultListModel<>();
    private DefaultMutableTreeNode fileSystemNode;
    private DefaultTreeModel treeModel;


    
    
    
    
}


