/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package EoT_Python_MQTT;

import java.awt.Cursor;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileFilter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.InputMap;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.AttributeSet;
import javax.swing.text.DocumentFilter;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import jsyntaxpane.DefaultSyntaxKit;
import jsyntaxpane.util.Configuration;
import paho.client.mqttv3.MqttException;

/**
 *
 * @author DELL2
 */
public class EoT_Python_MainFrame extends javax.swing.JFrame {

    //TERMINAL VARIABLES
    private final String LINE_SEPARATOR = System.lineSeparator();
    private final int ENTER_KEY = KeyEvent.VK_ENTER;
    private final int BACK_SPACE_KEY = KeyEvent.VK_BACK_SPACE;
    private String BACK_SPACE_KEY_BINDING;
    private final int INITIAL_CURSOR_POSITION = 4;

    private boolean isKeysDisabled;
    private int minCursorPosition = INITIAL_CURSOR_POSITION;
    private ImageFrame imageFrame;
    
    private boolean disableOutputs = false;

    //volatile private boolean waiting_result = false;
    //END TERMINAL VARIABLES
    /**
     * Creates new form EoT_MainFrame
     */
    public EoT_Python_MainFrame() {

        initComponents();
        this.setSize(910, 530);
        this.setLocationRelativeTo(null);

        //TERMINAL
        disableArrowKeys(receivedText.getInputMap());
        showPrompt();
        this.BACK_SPACE_KEY_BINDING = getKeyBinding(receivedText.getInputMap(), "BACK_SPACE");
        //END TERMINAL

        DefaultSyntaxKit.initKit();
        jEditorPane1.setContentType("text/python");
        jEditorPane1.setFont(new java.awt.Font("Monospaced", Font.PLAIN, 16));
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                imageFrame = new ImageFrame(new ImageIcon());
                imageFrame.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
                imageFrame.setVisible(false);
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        brokerAddressLabel = new javax.swing.JLabel();
        ip = new javax.swing.JTextField();
        portLabel = new javax.swing.JLabel();
        port = new javax.swing.JTextField();
        ConnectButton = new javax.swing.JButton();
        DisconnectButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        receivedScrollPane = new javax.swing.JScrollPane();
        receivedText = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        file = new javax.swing.JTextField();
        load = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();
        runFile = new javax.swing.JButton();
        jCheckBox1 = new javax.swing.JCheckBox();
        show1window = new javax.swing.JCheckBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("EoT Python Console Desktop Application");
        setMinimumSize(new java.awt.Dimension(905, 590));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                disconnectWhenClosing(evt);
            }
        });

        jPanel1.setMaximumSize(new java.awt.Dimension(897, 600));
        jPanel1.setPreferredSize(new java.awt.Dimension(897, 600));
        jPanel1.setLayout(null);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Connection Settings", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        brokerAddressLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        brokerAddressLabel.setText("EoT address:");

        ip.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ip.setText("192.168.1.1");
        ip.setToolTipText("");

        portLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        portLabel.setText("Port:");

        port.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        port.setText("1883");

        ConnectButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ConnectButton.setLabel("Connect");
        ConnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ConnectButtonActionPerformed(evt);
            }
        });

        DisconnectButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        DisconnectButton.setEnabled(false);
        DisconnectButton.setLabel("Disconnect");
        DisconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DisconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(brokerAddressLabel)
                .addGap(38, 38, 38)
                .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(portLabel)
                .addGap(24, 24, 24)
                .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 61, Short.MAX_VALUE)
                .addComponent(ConnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(DisconnectButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(portLabel))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ip, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(brokerAddressLabel))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(ConnectButton)
                        .addComponent(DisconnectButton))))
        );

        jPanel1.add(jPanel3);
        jPanel3.setBounds(10, 10, 880, 70);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Python Terminal", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        receivedText.setBackground(new java.awt.Color(0, 0, 0));
        receivedText.setColumns(20);
        receivedText.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        receivedText.setForeground(new java.awt.Color(255, 255, 255));
        receivedText.setRows(5);
        receivedText.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                receivedTextKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                receivedTextKeyReleased(evt);
            }
        });
        receivedScrollPane.setViewportView(receivedText);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(receivedScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 843, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(receivedScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 354, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Terminal", jPanel6);

        file.setEditable(false);
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        load.setText("load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        save.setText("save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(jEditorPane1);

        runFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        runFile.setText("Run Code");
        runFile.setEnabled(false);
        runFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(378, 378, 378)
                        .addComponent(runFile, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(file)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(load)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(save))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 832, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(23, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(load)
                    .addComponent(save))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(runFile)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Editor", jPanel2);

        jPanel1.add(jTabbedPane1);
        jTabbedPane1.setBounds(10, 90, 880, 430);

        jCheckBox1.setText("Do not show console outputs");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jPanel1.add(jCheckBox1);
        jCheckBox1.setBounds(10, 530, 250, 23);

        show1window.setSelected(true);
        show1window.setText("All show() in one window");
        show1window.setToolTipText("");
        show1window.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                show1windowActionPerformed(evt);
            }
        });
        jPanel1.add(show1window);
        show1window.setBounds(270, 530, 270, 23);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 5, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void disconnectWhenClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_disconnectWhenClosing
        if (EOT_Client != null && EOT_Client.isConnected()) {
            try {
                EOT_Client.unsubscribe("EOTPython");
                EOT_Client.disconnect();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Error disconnecting the client.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        this.dispose();
    }//GEN-LAST:event_disconnectWhenClosing

    private void DisconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DisconnectButtonActionPerformed
        try {
            EOT_Client.unsubscribe("EOTPython");
            EOT_Client.disconnect();
            DisconnectButton.setEnabled(false);
            runFile.setEnabled(false);
            ConnectButton.setEnabled(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error disconnecting the client.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_DisconnectButtonActionPerformed

    private void ConnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ConnectButtonActionPerformed
        // Create an instance of this class
        try {
            EOT_Client = new EoT_Python_MQTT_Client(ip.getText(), Integer.parseInt(port.getText()));
            // Set the jframe
            EOT_Client.setMainFrame(this);

            EOT_Client.connect();
            ConnectButton.setEnabled(false);
            DisconnectButton.setEnabled(true);
            runFile.setEnabled(true);
            //loadFileSystemStructure();
            Thread.sleep(500);
            EOT_Client.subscribe("EOTPython", 0);
            //EOT_Client.subscribe("EOTShowImage", 0);
        } catch (MqttException ex) {
            JOptionPane.showMessageDialog(this, "Error stablishing the connection.\n" + ex.getCause(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error stablishing the connection.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_ConnectButtonActionPerformed

    private void receivedTextKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_receivedTextKeyPressed
        int keyCode = evt.getKeyCode();
        if (keyCode == BACK_SPACE_KEY) {
            int cursorPosition = receivedText.getCaretPosition();
            if (cursorPosition == minCursorPosition && !isKeysDisabled) {
                disableBackspaceKey();
            } else if (cursorPosition > minCursorPosition && isKeysDisabled) {
                enableBackspaceKey();
            }
        } else if (keyCode == ENTER_KEY) {
            disableTerminal();
            String command = extractCommand();
            try {
                executeCommand(command);
            } catch (InterruptedException ex) {
                Logger.getLogger(EoT_Python_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
            //showNewLine();
            //showPrompt();
            //enableTerminal();
        }else{
            int cursorPosition = receivedText.getCaretPosition();
            if (cursorPosition < minCursorPosition) {
                receivedText.setCaretPosition(receivedText.getText().length());
            }
        }
    }//GEN-LAST:event_receivedTextKeyPressed

    private void receivedTextKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_receivedTextKeyReleased
        int keyCode = evt.getKeyCode();
        if (keyCode == ENTER_KEY) {
            receivedText.setCaretPosition(receivedText.getCaretPosition() - 1);
            setMinCursorPosition();
        }
    }//GEN-LAST:event_receivedTextKeyReleased

    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        BufferedReader in = null;
        try {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Python Files", "py");
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(filter);
            int returnVal = fileChooser.showOpenDialog(null);
            File pyfile = null;
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                System.out.println("You chose to open this file: " + fileChooser.getSelectedFile().getAbsolutePath());
                file.setText(fileChooser.getSelectedFile().getAbsolutePath());
                pyfile = fileChooser.getSelectedFile();
                in = new BufferedReader(new FileReader(pyfile));
                String line = "";
                String codelines = "";
                while ((line = in.readLine()) != null) {
                    codelines = codelines + line + "\n";
                }
                jEditorPane1.setText(codelines);
            }
        } catch (IOException ex) {
            this.showDialog(ex.getMessage());
        }
    }//GEN-LAST:event_loadActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        BufferedWriter writer = null;
        // Same file
        if (file.getText() != null && !file.getText().equals("")) {
            try {
                File logFile = new File(file.getText());
                writer = new BufferedWriter(new FileWriter(logFile));
                writer.write(jEditorPane1.getText());
                writer.close();
                this.showDialog("File saved.");
            } catch (IOException ex) {
                this.showDialog(ex.getMessage());
            }
        } 
        //  New file
        else {
            FileNameExtensionFilter filter = new FileNameExtensionFilter("Python Files", "py");
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setFileFilter(filter);
            int returnVal = fileChooser.showSaveDialog(null);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                //System.out.println("You chose to save this file: " + fileChooser.getSelectedFile().getAbsolutePath());
                String file2savedir = fileChooser.getSelectedFile().getAbsolutePath();
                if (!file2savedir.endsWith(".py")) {
                    file2savedir += ".py";
                }
                try {
                    File file2save = new File(file2savedir);
                    writer = new BufferedWriter(new FileWriter(file2save));
                    writer.write(jEditorPane1.getText());
                    writer.close();
                    file.setText(file2savedir);
                    this.showDialog("File saved.");
                } catch (IOException ex) {
                    this.showDialog(ex.getMessage());
                }
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void runFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runFileActionPerformed
        if (EOT_Client != null && EOT_Client.isConnected()) {
            String code2send = jEditorPane1.getText();
            System.out.println(code2send);
            try {
                disableTerminal();
                this.executeCommand(code2send);
            } catch (InterruptedException ex) {
                this.showDialog(ex.getMessage());
                enableTerminal();
            }
        } else {
            JOptionPane.showMessageDialog(this, "The client is not connected to a broker.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_runFileActionPerformed

    private void show1windowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_show1windowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_show1windowActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        disableOutputs = jCheckBox1.isSelected();
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    public void showMessage(String topic, String message) {
        //disableTerminal();
        showNewLine();
        if(message.charAt(0)==('<')){
            /*message = "END\n";
            receivedText.append(message);*/
            showPrompt();
            enableTerminal();
        }else{
            message = message.substring(1, message.length() - 1)+"\n";
            receivedText.append(message);
        }
        receivedText.requestFocus();
        receivedText.setCaretPosition(receivedText.getText().length());
        receivedScrollPane.getVerticalScrollBar().setValue(receivedScrollPane.getVerticalScrollBar().getMaximum());
        //enableTerminal();
        this.repaint();
        //waiting_result = false;
    }

    private void reset(String msg) {
        JOptionPane.showMessageDialog(this, msg);
        this.EOT_Client = null;
        this.setVisible(false);
        this.dispose();
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EoT_Python_MainFrame().setVisible(true);
            }
        });

    }

    void showDialog(String message) {
        JOptionPane.showMessageDialog(this, message);
    }

    void lock() {
        this.setEnabled(false);
        System.out.println("lock");

    }

    void unlock() {
        this.setEnabled(true);
        System.out.println("unlock");

    }

    //METHODS FOR TERMINAL
    private void disableArrowKeys(InputMap inputMap) {
        String[] keystrokeNames = {"UP", "DOWN", "LEFT", "RIGHT", "HOME"};
        for (int i = 0; i < keystrokeNames.length; ++i) {
            inputMap.put(KeyStroke.getKeyStroke(keystrokeNames[i]), "none");
        }
    }

    private void showPrompt() {
        receivedText.setText(receivedText.getText() + ">>> ");
        minCursorPosition = receivedText.getText().length();
    }

    private void showNewLine() {
        receivedText.setText(receivedText.getText() + LINE_SEPARATOR);
    }

    private String getKeyBinding(InputMap inputMap, String name) {
        return (String) inputMap.get(KeyStroke.getKeyStroke(name));
    }

    private void disableBackspaceKey() {
        isKeysDisabled = true;
        receivedText.getInputMap().put(KeyStroke.getKeyStroke("BACK_SPACE"),
                "none");
    }

    private void enableBackspaceKey() {
        isKeysDisabled = false;
        receivedText.getInputMap().put(KeyStroke.getKeyStroke("BACK_SPACE"),
                BACK_SPACE_KEY_BINDING);
    }

    private void setMinCursorPosition() {
        minCursorPosition = receivedText.getCaretPosition();
    }

    public void enableTerminal() {
        receivedText.setEnabled(true);
        runFile.setEnabled(true);
        receivedText.requestFocusInWindow();
    }

    public void disableTerminal() {
        receivedText.setEnabled(false);
        runFile.setEnabled(false);
    }

    private void executeCommand(String command) throws InterruptedException {
        if (EOT_Client != null && EOT_Client.isConnected()) {
            try {
                EOT_Client.sendCode("EOTPython", 0, command.getBytes(),disableOutputs);
                this.jTabbedPane1.setSelectedIndex(0);
            } catch (MqttException ex) {
                Logger.getLogger(EoT_Python_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {
            receivedText.append("\n The client is not connected to a Python broker.");
            showNewLine();
            showPrompt();
            enableTerminal();
            receivedText.requestFocus();
            receivedText.setCaretPosition(receivedText.getText().length());
            receivedScrollPane.getVerticalScrollBar().setValue(receivedScrollPane.getVerticalScrollBar().getMaximum());
        }
        //receivedText.append("\n"+command);
    }

    private String extractCommand() {
        removeLastLineSeparator();
        String newCommand = stripPreviousCommands();
        return newCommand;
    }

    private void removeLastLineSeparator() {
        String terminalText = receivedText.getText();
        if (terminalText.charAt(terminalText.length() - 1) == '\n') {
            terminalText = terminalText.substring(0, terminalText.length() - 1);
        } else {
            terminalText = terminalText.substring(0, terminalText.length());
        }
        receivedText.setText(terminalText);
    }

    private String stripPreviousCommands() {
        String terminalText = receivedText.getText();
        int lastPromptIndex = terminalText.lastIndexOf('>') + 2;
        if (lastPromptIndex < 0 || lastPromptIndex >= terminalText.length()) {
            return "";
        } else {
            return terminalText.substring(lastPromptIndex);
        }
    }

    //END METHODS FOR TERMINAL
    public void setSnapshot(final ImageIcon image) {
        if (!show1window.isSelected()) {
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new ImageFrame(image).setVisible(true);
                }
            });
        }else{
            this.imageFrame.changeImage(image);
            this.imageFrame.setVisible(true);
        }
        //imagePanel.setIcon(image);
        this.repaint();
    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        //this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("../logo.png")));
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.metal.MetalLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(EoT_Python_MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new EoT_Python_MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ConnectButton;
    private javax.swing.JButton DisconnectButton;
    private javax.swing.JLabel brokerAddressLabel;
    private javax.swing.JTextField file;
    private javax.swing.JTextField ip;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton load;
    private javax.swing.JTextField port;
    private javax.swing.JLabel portLabel;
    private javax.swing.JScrollPane receivedScrollPane;
    private javax.swing.JTextArea receivedText;
    private javax.swing.JButton runFile;
    private javax.swing.JButton save;
    private javax.swing.JCheckBox show1window;
    // End of variables declaration//GEN-END:variables

    // Our variables
    private EoT_Python_MQTT_Client EOT_Client;

}